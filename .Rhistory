ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_classic()
pcaData <- plotPCA(vsd, intgroup=c("skin"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=skin)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_classic()
pcaData <- plotPCA(vsd, intgroup=c("skin","time","injury","injury_size"), returnData=TRUE)
colData(dds)
pcaData <- plotPCA(vsd, intgroup=c("skin","time","injury"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=time, shape=skin, size=factor(injury))) +
geom_point() +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
theme_classic() +
labs( size="Injury", shape="Skin", color="Time")
colData(dds)
heat.counts <- assay(vsd)
num <- 30
topID <- order(rowMeans(heat.counts), decreasing = TRUE)
heat.mat <- heat.counts[topID, ]
heat.mat <- heat.mat - rowMeans(heat.mat)
heat.mat <- heat.mat[1:num, ,drop = FALSE]
rownames(heat.mat)
colnames(heat.mat) <- meta$sample
my_sample_col <- meta
rownames(my_sample_col) <- meta$sample
my_sample_col <- meta[,c(4,5,3)]
rownames(my_sample_col) <- meta$sample
pheatmap(
mat = heat.mat,
cluster_rows = T,
cluster_cols = T,
main = "Heatmap of the 30 most expressed IDs",
annotation_col = my_sample_col,
show_rownames=T,
show_colnames = T
)
heat.counts <- assay(vsd)
num <- 50
topID <- order(rowMeans(heat.counts), decreasing = TRUE)
heat.mat <- heat.counts[topID, ]
heat.mat <- heat.mat - rowMeans(heat.mat)
heat.mat <- heat.mat[1:num, ,drop = FALSE]
rownames(heat.mat)
colnames(heat.mat) <- meta$sample
my_sample_col <- meta
rownames(my_sample_col) <- meta$sample
my_sample_col <- meta[,c(4,5,3)]
rownames(my_sample_col) <- meta$sample
pheatmap(
mat = heat.mat,
cluster_rows = T,
cluster_cols = T,
main = "Heatmap of the 50 most expressed IDs",
annotation_col = my_sample_col,
show_rownames=T,
show_colnames = T
)
s1 <- subset(meta, meta$injury == "lam" & meta$time == "7dpw" & meta$skin == "wound")
s2 <- subset(meta, meta$injury == "SCI" & meta$skin == "wound")
cells.1 = rownames(s1)
cells.2 = rownames(s2)
group.info <- data.frame(row.names = c(cells.1, cells.2))
group.info[cells.1, "group"] <- "Group1"
group.info[cells.2, "group"] <- "Group2"
group.info[, "group"] <- factor(x = group.info[, "group"])
group.info$wellKey <- rownames(x = group.info)
dds1 <- DESeq2::DESeqDataSetFromMatrix(
countData = counts[,as.numeric(c(cells.1, cells.2))],
colData = group.info,
design = ~ group
)
dds1 <- DESeq2::estimateSizeFactors(object = dds1)
dds1 <- DESeq2::estimateDispersions(object = dds1, fitType = "local")
dds1 <- DESeq2::nbinomWaldTest(object = dds1)
res <- DESeq2::results(
object = dds1,
contrast = c("group", "Group1", "Group2")
)
res <- res[order(res$padj),]
resLFC <- res
summary(resLFC, alpha=0.05)
DT::datatable(as.data.frame(resLFC), extensions = 'FixedColumns',
options = list(
pageLength = 20,
scrollX = TRUE,
scrollCollapse = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
))
#write.csv(result,"cDC_vs_Mac.csv")
ggmaplot(resLFC,
fdr = 0.05, fc = 1.5, size = 0.5,
palette = c("#B31B21", "#1465AC", "darkgray"),
genenames = as.vector(rownames(resLFC)),
legend = "top", top = 10,
font.label = c("bold", 11),
font.legend = "bold",
font.main = "bold",
ggtheme = ggplot2::theme_minimal())
top_up <- rownames(resLFC[which(resLFC$log2FoldChange > 0),])[1:5]
top_down <- rownames(resLFC[which(resLFC$log2FoldChange < 0),])[1:5]
EnhancedVolcano(resLFC,
lab = rownames(resLFC),
x = 'log2FoldChange',
y = 'padj',
selectLab = c(top_up,top_down),
xlim = c(-8, 8),
pCutoff = 0.05,
FCcutoff = 1.5,
)
enriched_combined <- enrichr(rownames(resLFC[which(resLFC$padj < 0.05),]),dbs)
#library(tidyverse)
#library(dabestr)
library(enrichR)
enriched_combined <- enrichr(rownames(resLFC[which(resLFC$padj < 0.05),]),dbs)
enriched_combined
# This
enriched_combined <- enrichr(rownames(resLFC[which(resLFC$padj < 0.05 & resLFC$log2FoldChange > 1.5),]),dbs)
enriched_combined
rownames(resLFC[which(resLFC$padj < 0.05 & resLFC$log2FoldChange > 1.5),])
rownames(resLFC[which(resLFC$padj < 0.05),])
# This add log2foldchange threshold.
enriched_combined <- enrichr(rownames(resLFC[which(resLFC$padj < 0.05 & resLFC$log2FoldChange > 1.5),]),dbs)
DT::datatable(head(enriched_combined$GO_Biological_Process_2018,n=20)[,c(-3,-5,-6,-7)], extensions = c('FixedColumns','Buttons'),
options = list(
pageLength = 5,
scrollX = TRUE,
scrollCollapse = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel')
))
DT::datatable(head(enriched_combined$GO_Cellular_Component_2018,n=20)[,c(-3,-5,-6,-7)], extensions = c('FixedColumns','Buttons'),
options = list(
pageLength = 5,
scrollX = TRUE,
scrollCollapse = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel')
))
DT::datatable(head(enriched_combined$GO_Molecular_Function_2018,n=20)[,c(-3,-5,-6,-7)], extensions = c('FixedColumns','Buttons'),
options = list(
pageLength = 5,
scrollX = TRUE,
scrollCollapse = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel')
))
DT::datatable(head(enriched_combined$KEGG_2019_Mouse,n=20)[,c(-3,-5,-6,-7)], extensions = c('FixedColumns','Buttons'),
options = list(
pageLength = 5,
scrollX = TRUE,
scrollCollapse = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel')
))
cts <- assay(vsd)
cor.mat <- cor(cts)
my_sample_col <- meta
rownames(my_sample_col) <- meta$Labels
pheatmap(
mat = cor.mat,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Correlation",
annotation_col = my_sample_col,
show_rownames=FALSE,
show_colnames = FALSE
)
my_sample_col
my_sample_col
cts <- assay(vsd)
cor.mat <- cor(cts)
my_sample_col <- meta
rownames(my_sample_col) <- meta$sample
pheatmap(
mat = cor.mat,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Correlation",
annotation_col = my_sample_col,
show_rownames=FALSE,
show_colnames = FALSE
)
cor.mat
my_sample_col
cor.mat
my_sample_col
rownames(my_sample_col) <- meta$sample
pheatmap(
mat = cor.mat,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Correlation",
annotation_col = my_sample_col,
show_rownames=FALSE,
show_colnames = FALSE
)
my_sample_col
my_sample_col <- meta
pheatmap(
mat = cor.mat,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Correlation",
annotation_col = my_sample_col,
show_rownames=FALSE,
show_colnames = FALSE
)
my_sample_col <- meta
my_sample_col
my_sample_col <- meta[, 2:4]
rownames(my_sample_col) <- meta$sample
pheatmap(
mat = cor.mat,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Correlation",
annotation_col = my_sample_col,
show_rownames=FALSE,
show_colnames = FALSE
)
my_sample_col <- meta[, 2:4]
cor.mat <- cor(cts)
pheatmap(
mat = cor.mat,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Correlation",
annotation_col = my_sample_col,
show_rownames=FALSE,
show_colnames = FALSE
)
my_sample_col
rownames(my_sample_col)
rownames(my_sample_col) <- meta$sample
pheatmap(
mat = cor.mat,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Correlation",
annotation_col = my_sample_col,
show_rownames=FALSE,
show_colnames = FALSE
)
rownames(my_sample_col) <- rownames(meta)
pheatmap(
mat = cor.mat,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Correlation",
annotation_col = my_sample_col,
show_rownames=FALSE,
show_colnames = FALSE
)
rownames(my_sample_col)
rownames(meta)
meta
rownames(my_sample_col) <- meta$Name
pheatmap(
mat = cor.mat,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Correlation",
annotation_col = my_sample_col,
show_rownames=FALSE,
show_colnames = FALSE
)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
my_sample_col <- meta[, 2:4]
rownames(my_sample_col) <- meta$Name
pheatmap(
mat = sampleDistMatrix,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Distance",
annotation_col = my_sample_col,
show_rownames=TRUE,
show_colnames = TRUE
)
rownames(my_sample_col) <- meta$sample
pheatmap(
mat = sampleDistMatrix,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Distance",
annotation_col = my_sample_col,
show_rownames=TRUE,
show_colnames = TRUE
)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
my_sample_col <- meta[, 2:4]
rownames(my_sample_col) <- meta$sample
pheatmap(
mat = sampleDistMatrix,
cluster_rows = T,
cluster_cols = T,
main = "Sample-Sample Distance",
annotation_col = my_sample_col,
show_rownames=TRUE,
show_colnames = TRUE
)
rownames(my_sample_col) <- meta$Name
my_sample_col
sampleDists
sampleDistMatrix
library(Seurat)
library(Seurat)
library(Seurat)
#library(tidyverse)
#library(dabestr)
library(enrichR)
#library(tidyverse)
#library(dabestr)
library(enrichR)
knitr::opts_knit$set(root.dir = "C:/Users/flyku/Documents/GitHub/RNA-seq-pipeline/rnaseq")
knitr::opts_knit$set(root.dir = "C:/Users/flyku/Desktop/ISU")
counts <- read.csv("count-data-scrna.csv",stringsAsFactors = F,check.names = F)
meta <- read.csv("col-data-scrna.csv",stringsAsFactors = F)
# Overview of the dataset
counts[1:10, 1:10]
meta[1:10,]
meta <- read.csv("col-data-scrna.csv",stringsAsFactors = F, row.names = 1)
# Overview of the dataset
counts[1:10, 1:10]
meta[1:10,]
# choose whahtever column as design
obj <- CreateSeuratObject(counts = counts, project = "scRNAseq", min.cells = 3, min.features = 200)
obj
obj <- AddMetaData(object = obj, metadata = meta)
obj
## Change to human or mouse
dbs <- c("GO_Molecular_Function_2018", "GO_Cellular_Component_2018", "GO_Biological_Process_2018","KEGG_2019_Human")
counts <- read.csv("count-data-scrna.csv",stringsAsFactors = F,check.names = F)
meta <- read.csv("col-data-scrna.csv",stringsAsFactors = F, row.names = 1)
# Overview of the dataset
counts[1:10, 1:10]
meta[1:10,]
# choose whahtever column as design
obj <- CreateSeuratObject(counts = counts, project = "scRNAseq", min.cells = 3, min.features = 200)
obj <- AddMetaData(object =obj, metadata = meta)
obj <- NormalizeData(obj)
obj
obj <- NormalizeData(obj)
## Change to human or mouse
dbs <- c("GO_Molecular_Function_2018", "GO_Cellular_Component_2018", "GO_Biological_Process_2018","KEGG_2019_Human")
counts <- read.csv("count-data-scrna.csv",stringsAsFactors = F,check.names = F)
meta <- read.csv("col-data-scrna.csv",stringsAsFactors = F)
# Overview of the dataset
counts[1:10, 1:10]
meta[1:10,]
# choose whahtever column as design
obj <- CreateSeuratObject(counts = counts, project = "scRNAseq", min.cells = 3, min.features = 200)
obj <- AddMetaData(object = obj, metadata = meta)
obj <- NormalizeData(obj)
obj
## Change to human or mouse
dbs <- c("GO_Molecular_Function_2018", "GO_Cellular_Component_2018", "GO_Biological_Process_2018","KEGG_2019_Human")
counts <- read.csv("count-data-scrna.csv",stringsAsFactors = F,check.names = F)
meta <- read.csv("col-data-scrna.csv",stringsAsFactors = F, row.names = 1)
# Overview of the dataset
counts[1:10, 1:10]
meta[1:10,]
# choose whahtever column as design
obj <- CreateSeuratObject(counts = counts, project = "scRNAseq", min.cells = 3, min.features = 200)
obj <- AddMetaData(object = obj, metadata = meta)
obj <- NormalizeData(obj)
obj <- FindVariableFeatures(obj, selection.method = "vst", nfeatures = 2000)
Idents(obj)
Idents(obj) <- obj$orig.ident
obj$orig.ident
## Change to human or mouse
dbs <- c("GO_Molecular_Function_2018", "GO_Cellular_Component_2018", "GO_Biological_Process_2018","KEGG_2019_Human")
counts <- read.csv("count-data-scrna.csv",stringsAsFactors = F,check.names = F)
meta <- read.csv("col-data-scrna.csv",stringsAsFactors = F, row.names = 1)
# Overview of the dataset
counts[1:10, 1:10]
meta[1:10,]
# choose whahtever column as design
obj <- CreateSeuratObject(counts = counts, project = "scRNAseq", min.cells = 3, min.features = 200)
obj <- AddMetaData(object = obj, metadata = meta)
rownames(obj)
counts <- read.csv("count-data-scrna.csv",stringsAsFactors = F,check.names = F, row.names = 1)
meta <- read.csv("col-data-scrna.csv",stringsAsFactors = F, row.names = 1)
# choose whahtever column as design
obj <- CreateSeuratObject(counts = counts, project = "scRNAseq", min.cells = 3, min.features = 200)
obj <- AddMetaData(object = obj, metadata = meta)
Idents(obj) <- obj$orig.ident
obj <- NormalizeData(obj)
obj <- FindVariableFeatures(obj, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(obj)
obj <- ScaleData(obj, features = all.genes)
obj <- RunPCA(obj, features = VariableFeatures(object = obj))
obj <- JackStraw(obj, num.replicate = 100)
obj <- ScoreJackStraw(obj, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:15)
JackStrawPlot(obj, dims = 1:15)
ElbowPlot(pbmc)
ElbowPlot(obj)
obj <- FindNeighbors(obj, dims = 1:10)
obj <- FindClusters(obj, resolution = 0.5)
pbmc <- RunUMAP(pbmc, dims = 1:10)
obj <- RunUMAP(obj, dims = 1:10)
DimPlot(obj, reduction = "umap")
Idents(obj) <- obj$Cluster
DimPlot(obj, reduction = "umap")
Idents(obj) <- obj$Time
DimPlot(obj, reduction = "umap")
Idents(obj) <- obj$Condition
DimPlot(obj, reduction = "umap")
cts_de_genes <- FindMarkers(obj, min.pct = 0.25)
cts_de_genes <- FindMarkers(obj)
Idents(obj) <- obj$seurat_clusters
cts_de_genes <- FindAllMarkers(obj)
cts_de_genes[1:5,]
numericInput("rows", "How many cars?", 5)
numericInput("rows", "How many cars?", 5)
renderTable({
head(cars, input$rows)
})
library(rsconnect)
rsconnect::deployApp('path/to/your/app')options("repos")
options("repos")
options(repos = BiocManager::repositories())
options(repos = BiocManager::repositories())
options(repos = BiocManager::repositories())
options("repos")
rsconnect::appDependencies()
rsconnect::appDependencies()
remove.packages("Seurat")
install.packages('Seurat')
install.packages("Seurat")
knitr::opts_chunk$set(echo = TRUE)
bioc_packages <- c(
"DESeq2","EnhancedVolcano"
)
cran_packages <- c(
"Seurat","enrichR","ggpubr","pheatmap","ggplot2","VennDiagram","stringr"
)
bioc_np <- bioc_packages[!(bioc_packages %in% installed.packages()[,"Package"])]
cran_np <- cran_packages[!(cran_packages %in% installed.packages()[,"Package"])]
if (!require("BiocManager")) install.packages("BiocManager")
if(length(cran_np)) {
install.packages(cran_np)
}
if(length(bioc_np)) {
BiocManager::install(bioc_np)
}
library(Seurat)
#library(tidyverse)
#library(dabestr)
library(enrichR)
#library(ggpubr)
#library(Hmisc)
#library(ggpubr)
#library(EnhancedVolcano)
#library(VennDiagram)
#library(ggrepel)
#library(ggfortify)
#library(pheatmap)
#library(DESeq2)
knitr::opts_knit$set(root.dir = "C:/Users/flyku/Desktop/ISU")
# This select genes of adj.p.value < 0.05, sometimes people use different threshold, like adding log2foldchange threshold.
#enriched_combined <- enrichr(rownames(resLFC[which(resLFC$padj < 0.05),]),dbs)
resLFC <- cts_de_genes
resLFC
enriched_combined <- enrichr(rownames(cts_de_genes[which(cts_de_genes$p_val_adj < 0.05 & abs(cts_de_genes$avg_logFC) > 1.5),]),dbs)
enriched_combined
# output top 20 enriched terms
DT::datatable(head(enriched_combined$GO_Biological_Process_2018,n=20)[,c(-3,-5,-6,-7)], extensions = c('FixedColumns','Buttons'),
options = list(
pageLength = 5,
scrollX = TRUE,
scrollCollapse = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel')
))
Idents(obj) <- obj$Condition
cts_de_genes <- FindMarkers(obj)
Idents(obj) <- obj$Condition
cts_de_genes <- FindMarkers(obj, ident.1 = "Control", ident.2 = "Disease")
cts_de_genes[1:5,]
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(hdf5r))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(SingleCellExperiment))
suppressPackageStartupMessages(library(jsonlite))
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(devEMF))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(Seurat))
suppressPackageStartupMessages(library(DrImpute))
suppressPackageStartupMessages(library(scran))
suppressPackageStartupMessages(library(slingshot))
suppressPackageStartupMessages(library(destiny))
suppressPackageStartupMessages(library(gam))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(Polychrome))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cluster))
suppressPackageStartupMessages(library(xfun))
suppressPackageStartupMessages(library(reader))
normalizeSCE
